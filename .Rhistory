knitr::opts_chunk$set(echo = TRUE)
my_data = read_csv('data/train.csv')
library(ggplot2)   # data visualization
library(tidyverse) # a set of module for data manipulation
my_data = read_csv('data/train.csv')
my_test_data = read_csv('data/test.csv')
names(my_data)
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
old_feature_names = names(my_data)
str_split('X_41', '_')
str_split('X_41', '_')[[1]]
str_split('X_41', '_')[[1]][2]
nchar(str_split('X_41', '_')[[1]][2])
new_feature_names = vector()
feature_names = names(my_data)
cor(my_data[, seq(1, 20, 2)])
cor(my_data[, seq(2, 20, 2)])
my_data[, seq(2, 20, 2)]
seq(2, 20, 2)
i
i=5
str_split(feature_names[i], '_')[[1]][2]
str_split(feature_names[i], '_')[[1]]
str_split(feature_names[i], '_')[[1]]
collapse("0", "3")
paste0("0", "3")
collapse(str_split(feature_names[i], '_')[[1]], '_')
collapse(str_split(feature_names[i], '_')[[1]])
str_split(feature_names[i], '_')[[1]]
?collapse
?paste0
paste0(str_split(feature_names[i], '_')[[1]], collapse = '_')
for (i in 1:feature_names) {
parts = str_split(feature_names[i], '_')[[1]]
if(nchar(parts[2]) == 1) {
parts[2] =  paste0(0, parts[2])
feature_names[i] = paste0(parts[2], '_')
}
}
for (i in 1:length(feature_names)) {
parts = str_split(feature_names[i], '_')[[1]]
if(nchar(parts[2]) == 1) {
parts[2] =  paste0(0, parts[2])
feature_names[i] = paste0(parts[2], '_')
}
}
for (i in 1:(length(feature_names)-1)) {
parts = str_split(feature_names[i], '_')[[1]]
if(nchar(parts[2]) == 1) {
parts[2] =  paste0(0, parts[2])
feature_names[i] = paste0(parts[2], '_')
}
}
feature_names = names(my_data)
for (i in 1:(length(feature_names)-1)) {
parts = str_split(feature_names[i], '_')[[1]]
if(nchar(parts[2]) == 1) {
parts[2] =  paste0(0, parts[2])
feature_names[i] = paste0(parts[2], '_')
}
}
length(feature_names)-1
for (i in 1:(length(feature_names)-1)) {
parts = str_split(feature_names[i], '_')[[1]]
cat(parts)
if(nchar(parts[2]) == 1) {
parts[2] =  paste0(0, parts[2])
feature_names[i] = paste0(parts[2], '_')
}
}
feature_names
for (i in 1:(length(feature_names)-1)) {
parts = str_split(feature_names[i], '_')[[1]]
cat(parts[2])
if(nchar(parts[2]) == 1) {
parts[2] =  paste0(0, parts[2])
feature_names[i] = paste0(parts[2], '_')
}
}
for (i in 1:(length(feature_names)-1)) {
parts = str_split(feature_names[i], '_')[[1]]
cat(parts[2],'\n')
if(nchar(parts[2]) == 1) {
parts[2] =  paste0(0, parts[2])
feature_names[i] = paste0(parts[2], '_')
}
}
feature_names
which(colnames(my_data) == 'X45')
colnames(my_data)[which(colnames(my_data) == 'X45')] = 'X_45'
feature_names = names(my_data)
for (i in 1:(length(feature_names)-1)) {
parts = str_split(feature_names[i], '_')[[1]]
cat(parts[2],'\n')
if(nchar(parts[2]) == 1) {
parts[2] =  paste0(0, parts[2])
feature_names[i] = paste0(parts[2], '_')
}
}
feature_names
for (i in 1:(length(feature_names)-1)) {
parts = str_split(feature_names[i], '_')[[1]]
if(nchar(parts[2]) == 1) {
parts[2] =  paste0(0, parts[2])
cat(parts, '\n')
feature_names[i] = paste0(parts[2], '_')
}
}
for (i in 1:(length(feature_names)-1)) {
parts = str_split(feature_names[i], '_')[[1]]
if(nchar(parts[2]) == 1) {
parts[2] =  paste0(0, parts[2])
feature_names[i] = paste0(parts[2], '_')
}
}
feature_names
for (i in 1:(length(feature_names)-1)) {
parts = str_split(feature_names[i], '_')[[1]]
if(nchar(parts[2]) == 1) {
parts[2] =  paste0(0, parts[2])
}
feature_names[i] = paste0(parts, '_')
}
feature_names
for (i in 1:(length(feature_names)-1)) {
parts = str_split(feature_names[i], '_')[[1]]
if(nchar(parts[2]) == 1) {
parts[2] =  paste0(0, parts[2])
}
print(parts)
feature_names[i] = paste0(parts, '_')
}
for (i in 1:(length(feature_names)-1)) {
parts = str_split(feature_names[i], '_')[[1]]
print(parts)
if(nchar(parts[2]) == 1) {
parts[2] =  paste0(0, parts[2])
}
print(parts)
feature_names[i] = paste0(parts, '_')
}
feature_names = names(my_data)
for (i in 1:(length(feature_names)-1)) {
parts = str_split(feature_names[i], '_')[[1]]
print(parts)
if(nchar(parts[2]) == 1) {
parts[2] =  paste0(0, parts[2])
}
print(parts)
feature_names[i] = paste0(parts, '_')
}
feature_names
feature_names = names(my_data)
for (i in 1:(length(feature_names)-1)) {
parts = str_split(feature_names[i], '_')[[1]]
print(parts)
if(nchar(parts[2]) == 1) {
parts[2] =  paste0(0, parts[2])
}
print(parts)
feature_names[i] = paste0(parts, collapse = '_')
}
feature_names
for (i in 1:(length(feature_names)-1)) {
parts = str_split(feature_names[i], '_')[[1]]
if(nchar(parts[2]) == 1) {
parts[2] =  paste0(0, parts[2])
}
feature_names[i] = paste0(parts, collapse = '_')
}
feature_names = names(my_data)
for (i in 1:(length(feature_names)-1)) {
parts = str_split(feature_names[i], '_')[[1]]
if(nchar(parts[2]) == 1) {
parts[2] =  paste0(0, parts[2])
}
feature_names[i] = paste0(parts, collapse = '_')
}
feature_names
sort(feature_names)
my_data = my_data[, sort(feature_names)]
colnames(my_data) = feature_names
my_data = my_data[, sort(feature_names)]
head(my_data)
cor(my_data[, seq(2, 20, 2)])
?cor
cor(my_data[, seq(2, 20, 2)], na.rm=TRUE)
cor(my_data[, seq(2, 20, 2)], use = 'pairwise.complete.obs')
is.numeric(my_data)
my_data
select_if(my_data, is.numeric)
cor(select_if(my_data, is.numeric), use="pairwise.complete.obs")
numeric_cols_data = select_if(my_data, is.numeric)
cor(numeric_cols_data, use="pairwise.complete.obs")
for (i in colnames(numeric_cols_data)) {
res = lm(y~., data = numeric_cols_data[, c('y', i)])
print(res)
}
for (i in colnames(numeric_cols_data)) {
res = lm(y~., data = numeric_cols_data[, c('y', i)])
print(summary(res))
}
res
summary(res)
res
for (i in colnames(numeric_cols_data)) {
if (i == 'y') break()
res = lm(y~., data = numeric_cols_data[, c('y', i)])
print(summary(res))
}
summary(res)
names(summary(res))
summary(res)$adj.r.squared
for (i in colnames(numeric_cols_data)) {
if (i == 'y') break()
res = lm(y~., data = numeric_cols_data[, c('y', i)])
print(summary(res)$adj.r.squared)
}
my_data
select(my_data, starts_with('X_4'))
my_data$X_43/my_data$X_41
plot(my_data$y, my_data$X_41)
plot(my_data$y, my_data$X_43)
for (i in colnames(numeric_cols_data)) {
if (i == 'y') break()
res = lm(y~., data = numeric_cols_data[, c('y', i)])
print(summary(res))
print(summary(res)$adj.r.squared)
}
my_data
plot(density(my_data$X_01_2))
plot(density(my_data$X_01_2, na.rm = TRUE))
cor(numeric_cols_data, use="pairwise.complete.obs")
