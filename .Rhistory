gather_RSq_df = gather(RSq_df)
gather_RSq_df['x'] = rep(1:nrow(RSq_df), 20)
p2 = ggplot(data = gather_RSq_df, aes(x=x, y=value, color=key)) +
geom_line() +
geom_vline(xintercept = highest_best_num) +
xlab("Number of Variables") +
ylab("Adjusted R Squared") +
theme(legend.position="none")
# Cp
gather_Cp_df = gather(Cp_df)
# RSS
gather_RSS_df = gather(RSS_df)
gather_RSS_df['x'] = rep(1:nrow(RSS_df), n)
p1 = ggplot(data = gather_RSS_df, aes(x=x, y=value, color=key)) +
geom_line() +
geom_vline(xintercept = highest_best_num) +
xlab("Number of Variables") +
ylab("RSS") +
theme(legend.position="none")
# RSq
gather_RSq_df = gather(RSq_df)
gather_RSq_df['x'] = rep(1:nrow(RSq_df), n)
p2 = ggplot(data = gather_RSq_df, aes(x=x, y=value, color=key)) +
geom_line() +
geom_vline(xintercept = highest_best_num) +
xlab("Number of Variables") +
ylab("Adjusted R Squared") +
theme(legend.position="none")
# Cp
gather_Cp_df = gather(Cp_df)
gather_Cp_df['x'] = rep(1:nrow(Cp_df), n)
p3 = ggplot(data = gather_Cp_df, aes(x=x, y=value, color=key)) +
geom_line() +
geom_vline(xintercept = highest_best_num) +
xlab("Number of Variables") +
ylab("Cp") +
theme(legend.position="none")
# BIC
gather_BIC_df = gather(BIC_df)
gather_BIC_df['x'] = rep(1:nrow(BIC_df), n)
p4 = ggplot(data = gather_BIC_df, aes(x=x, y=value, color=key)) +
geom_line() +
geom_vline(xintercept = highest_best_num) +
xlab("Number of Variables") +
ylab("BIC") +
theme(legend.position="none")
grid.arrange(p1, p2, p3, p4, nrow=2, ncol=2)
grid.arrange(p1, p2, ncol=2)
coef(regfit.fwd, best_num_of_variables))[-1]
coef(regfit.fwd, best_num_of_variables)[-1]
names(coef(regfit.fwd, best_num_of_variables)[-1])
selected_columns = c(names(coef(regfit.fwd, best_num_of_variables)[-1]), 'y')
lr.fit = lm(y~., data = train[selected_columns])
summary(lr.fit)
predict(lr.fit)
lm.fit = lm(y~., data = train[selected_columns])
test_pred = predict(lm.fit, newdata = test[selected_columns])
train_pred = predict(lm.fit)
train_error = (train$y - train_pred)^2
train_error
boxplot(train_error)
boxplot(train_error, train_error)
boxplot(cbind(train_error, train_error) )
n = 50 # 20x cross valiation: train/test = 70/30
#-------first run-------
index = sample(1:nrow(my_data), size = round(0.7*nrow(my_data)))
train = my_data[index, ]
test = my_data[-index, ]
regfit.fwd = regsubsets(y~., data = train, nvmax = 1000, method = "forward")
regfit.fwd.summary = summary(regfit.fwd)
best_num_of_variables = head(which(regfit.fwd.summary$adjr2 > 0.995), 1)
best_variables = paste0(names(coef(regfit.fwd, best_num_of_variables))[-1], collapse=',')
best_models = data.frame(best_num_of_variables, best_variables, stringsAsFactors = FALSE)
selected_columns = c(names(coef(regfit.fwd, best_num_of_variables)[-1]), 'y')
lm.fit = lm(y~., data = train[selected_columns])
train_pred = predict(lm.fit)
test_pred = predict(lm.fit, newdata = test[selected_columns])
train_error = (train$y - train_pred)^2
test_error = (test$y - test_pred)^2
errors_df = data.frame(run_1=c(train_error, test_error))
RSS_df = data.frame(run_01 = regfit.fwd.summary$rss)
RSq_df = data.frame(run_01 = regfit.fwd.summary$adjr2)
Cp_df = data.frame(run_01 = regfit.fwd.summary$cp)
BIC_df = data.frame(run_01 = regfit.fwd.summary$bic)
#-------second to n runs------
for (i in 2:n) {
index = sample(1:nrow(my_data), size = round(0.7*nrow(my_data)))
train = my_data[index, ]
test = my_data[-index, ]
regfit.fwd = regsubsets(y~., data = train, nvmax = 1000, method = "forward")
regfit.fwd.summary = summary(regfit.fwd)
if (i < 10) {
col_name = paste0('run_0', i)
} else {
col_name = paste0('run_', i)
}
best_num_of_variables = head(which(regfit.fwd.summary$adjr2 > 0.995), 1)
best_variables = paste0(names(coef(regfit.fwd, best_num_of_variables))[-1], collapse=',')
best_models[i, ] = c(best_num_of_variables, best_variables)
selected_columns = c(names(coef(regfit.fwd, best_num_of_variables)[-1]), 'y')
lm.fit = lm(y~., data = train[selected_columns])
train_pred = predict(lm.fit)
test_pred = predict(lm.fit, newdata = test[selected_columns])
train_error = (train$y - train_pred)^2
test_error = (test$y - test_pred)^2
errors_df[, i] = data.frame(run_1=c(train_error, test_error))
RSS_df[col_name] = regfit.fwd.summary$rss
RSq_df[col_name] = regfit.fwd.summary$adjr2
Cp_df[col_name] = regfit.fwd.summary$cp
BIC_df[col_name] = regfit.fwd.summary$bic
}
errors_df
boxplot(errors_df)
n = 50 # 20x cross valiation: train/test = 70/30
#-------first run-------
index = sample(1:nrow(my_data), size = round(0.7*nrow(my_data)))
train = my_data[index, ]
test = my_data[-index, ]
regfit.fwd = regsubsets(y~., data = train, nvmax = 1000, method = "forward")
regfit.fwd = regsubsets(y~., data = train, nvmax = 1000, method = "forward")
regfit.fwd.summary = summary(regfit.fwd)
regfit.fwd = regsubsets(y~., data = train, nvmax = 1000, method = "forward")
regfit.fwd.summary = summary(regfit.fwd)
best_num_of_variables = head(which(regfit.fwd.summary$adjr2 > 0.995), 1)
best_variables = paste0(names(coef(regfit.fwd, best_num_of_variables))[-1], collapse=',')
best_models = data.frame(best_num_of_variables, best_variables, stringsAsFactors = FALSE)
selected_columns = c(names(coef(regfit.fwd, best_num_of_variables)[-1]), 'y')
lm.fit = lm(y~., data = train[selected_columns])
train_pred = predict(lm.fit)
test_pred = predict(lm.fit, newdata = test[selected_columns])
train_error = (train$y - train_pred)^2
test_error = (test$y - test_pred)^2
errors_df = data.frame(run_01=c(train_error, test_error))
RSS_df = data.frame(run_01 = regfit.fwd.summary$rss)
RSq_df = data.frame(run_01 = regfit.fwd.summary$adjr2)
Cp_df = data.frame(run_01 = regfit.fwd.summary$cp)
BIC_df = data.frame(run_01 = regfit.fwd.summary$bic)
#-------second to n runs------
for (i in 2:n) {
index = sample(1:nrow(my_data), size = round(0.7*nrow(my_data)))
train = my_data[index, ]
test = my_data[-index, ]
regfit.fwd = regsubsets(y~., data = train, nvmax = 1000, method = "forward")
regfit.fwd.summary = summary(regfit.fwd)
if (i < 10) {
col_name = paste0('run_0', i)
} else {
col_name = paste0('run_', i)
}
best_num_of_variables = head(which(regfit.fwd.summary$adjr2 > 0.995), 1)
best_variables = paste0(names(coef(regfit.fwd, best_num_of_variables))[-1], collapse=',')
best_models[i, ] = c(best_num_of_variables, best_variables)
selected_columns = c(names(coef(regfit.fwd, best_num_of_variables)[-1]), 'y')
lm.fit = lm(y~., data = train[selected_columns])
train_pred = predict(lm.fit)
test_pred = predict(lm.fit, newdata = test[selected_columns])
train_error = (train$y - train_pred)^2
test_error = (test$y - test_pred)^2
errors_df[col_name] = data.frame(run_1=c(train_error, test_error))
RSS_df[col_name] = regfit.fwd.summary$rss
RSq_df[col_name] = regfit.fwd.summary$adjr2
Cp_df[col_name] = regfit.fwd.summary$cp
BIC_df[col_name] = regfit.fwd.summary$bic
}
boxplot(errors_df)
dim(errors_df)
n = 20 # 20x cross valiation: train/test = 70/30
#-------first run-------
index = sample(1:nrow(my_data), size = round(0.7*nrow(my_data)))
train = my_data[index, ]
test = my_data[-index, ]
regfit.fwd = regsubsets(y~., data = train, nvmax = 1000, method = "forward")
best_variables = paste0(names(coef(regfit.fwd, best_num_of_variables))[-1], collapse=',')
best_models = data.frame(best_num_of_variables, best_variables, stringsAsFactors = FALSE)
selected_columns = c(names(coef(regfit.fwd, best_num_of_variables)[-1]), 'y')
lm.fit = lm(y~., data = train[selected_columns])
train_pred = predict(lm.fit)
test_pred = predict(lm.fit, newdata = test[selected_columns])
train_error = (train$y - train_pred)^2
test_error = (test$y - test_pred)^2
errors_df = data.frame(run_01=c(train_error, test_error))
RSS_df = data.frame(run_01 = regfit.fwd.summary$rss)
RSq_df = data.frame(run_01 = regfit.fwd.summary$adjr2)
Cp_df = data.frame(run_01 = regfit.fwd.summary$cp)
BIC_df = data.frame(run_01 = regfit.fwd.summary$bic)
#-------second to n runs------
for (i in 2:n) {
index = sample(1:nrow(my_data), size = round(0.7*nrow(my_data)))
train = my_data[index, ]
test = my_data[-index, ]
regfit.fwd = regsubsets(y~., data = train, nvmax = 1000, method = "forward")
regfit.fwd.summary = summary(regfit.fwd)
if (i < 10) {
col_name = paste0('run_0', i)
} else {
col_name = paste0('run_', i)
}
best_num_of_variables = head(which(regfit.fwd.summary$adjr2 > 0.995), 1)
best_variables = paste0(names(coef(regfit.fwd, best_num_of_variables))[-1], collapse=',')
best_models[i, ] = c(best_num_of_variables, best_variables)
selected_columns = c(names(coef(regfit.fwd, best_num_of_variables)[-1]), 'y')
lm.fit = lm(y~., data = train[selected_columns])
train_pred = predict(lm.fit)
test_pred = predict(lm.fit, newdata = test[selected_columns])
train_error = (train$y - train_pred)^2
test_error = (test$y - test_pred)^2
errors_df[col_name] = data.frame(run_1=c(train_error, test_error))
RSS_df[col_name] = regfit.fwd.summary$rss
RSq_df[col_name] = regfit.fwd.summary$adjr2
Cp_df[col_name] = regfit.fwd.summary$cp
BIC_df[col_name] = regfit.fwd.summary$bic
}
# frequency of best number of variables
table(best_models$best_num_of_variables)
highest_best_num = as.integer(names(which.max(table(best_models$best_num_of_variables))))
# most important variables
sort(table(strsplit(paste0(best_models$best_variables, collapse=','), ',')[[1]]), decreasing = TRUE)[1:highest_best_num]
# RSS
gather_RSS_df = gather(RSS_df)
gather_RSS_df['x'] = rep(1:nrow(RSS_df), n)
p1 = ggplot(data = gather_RSS_df, aes(x=x, y=value, color=key)) +
geom_line() +
geom_vline(xintercept = highest_best_num) +
xlab("Number of Variables") +
ylab("RSS") +
theme(legend.position="none")
# RSq
gather_RSq_df = gather(RSq_df)
gather_RSq_df['x'] = rep(1:nrow(RSq_df), n)
p2 = ggplot(data = gather_RSq_df, aes(x=x, y=value, color=key)) +
geom_line() +
geom_vline(xintercept = highest_best_num) +
xlab("Number of Variables") +
ylab("Adjusted R Squared") +
theme(legend.position="none")
grid.arrange(p1, p2, ncol=2)
best_model
best_models
# frequency of best number of variables
table(best_models$best_num_of_variables)
errors_df
rep('train', nrow(train))
# Erros DataFrame
errors_df$error_type = c(rep('train', nrow(train)), rep('test', nrow(test)))
head(errors_df)
?gather
gather(errors_df, names(errors_df)[-"error_type"])
names(errors_df)[-"error_type"]
names(errors_df)
setdiff(names(errors_df), 'error_type')
gather(errors_df, key = "key", value = "value", setdiff(names(errors_df), 'error_type'))
gather(errors_df, key = "key", value = "value", setdiff(names(errors_df), 'error_type'))
gatther_errors_df = gather(errors_df, key = "key", value = "value", setdiff(names(errors_df), 'error_type'))
gather_errors_df = gather(errors_df, key = "key", value = "value", setdiff(names(errors_df), 'error_type'))
head(gather_errors_df)
ggplot(data = gather_errors_df, aes(x = key, y = value, color=error_type)) +
geom_boxplot()
errors_df
boxplot(run_20~error_type, errors_df[, c('run_20', 'error_type')])
predict(lm.fit, newdata = test[selected_columns])
predict(lm.fit, newdata = test[selected_columns], ylim=c(0, 5))
boxplot(run_20~error_type, errors_df[, c('run_20', 'error_type')], ylim = c(0,5))
boxplot(run_20~error_type, errors_df[, c('run_20', 'error_type')], ylim = c(0,1))
boxplot(run_20~error_type, errors_df[, c('run_20', 'error_type')], ylim = c(0,.5))
dim(train)
dim(test)
dim(my_data)
#-------first run-------
index = sample(1:nrow(my_data), size = round(0.7*nrow(my_data)))
train = my_data[index, ]
test = my_data[-index, ]
dim(my_data)
dim(train)
dim(test)
#-------first run-------
index = sample(1:nrow(my_data), size = round(0.6*nrow(my_data)))
train = my_data[index, ]
test = my_data[-index, ]
regfit.fwd = regsubsets(y~., data = train, nvmax = 1000, method = "forward")
regfit.fwd.summary = summary(regfit.fwd)
best_num_of_variables = head(which(regfit.fwd.summary$adjr2 > 0.995), 1)
best_variables = paste0(names(coef(regfit.fwd, best_num_of_variables))[-1], collapse=',')
best_models = data.frame(best_num_of_variables, best_variables, stringsAsFactors = FALSE)
selected_columns = c(names(coef(regfit.fwd, best_num_of_variables)[-1]), 'y')
lm.fit = lm(y~., data = train[selected_columns])
train_pred = predict(lm.fit)
test_pred = predict(lm.fit, newdata = test[selected_columns])
train_error = (train$y - train_pred)^2
test_error = (test$y - test_pred)^2
errors_df = data.frame(run_01=c(train_error, test_error))
RSS_df = data.frame(run_01 = regfit.fwd.summary$rss)
RSq_df = data.frame(run_01 = regfit.fwd.summary$adjr2)
Cp_df = data.frame(run_01 = regfit.fwd.summary$cp)
BIC_df = data.frame(run_01 = regfit.fwd.summary$bic)
#-------second to n runs------
for (i in 2:n) {
index = sample(1:nrow(my_data), size = round(0.7*nrow(my_data)))
train = my_data[index, ]
test = my_data[-index, ]
regfit.fwd = regsubsets(y~., data = train, nvmax = 1000, method = "forward")
regfit.fwd.summary = summary(regfit.fwd)
if (i < 10) {
col_name = paste0('run_0', i)
} else {
col_name = paste0('run_', i)
}
best_num_of_variables = head(which(regfit.fwd.summary$adjr2 > 0.995), 1)
best_variables = paste0(names(coef(regfit.fwd, best_num_of_variables))[-1], collapse=',')
best_models[i, ] = c(best_num_of_variables, best_variables)
selected_columns = c(names(coef(regfit.fwd, best_num_of_variables)[-1]), 'y')
lm.fit = lm(y~., data = train[selected_columns])
train_pred = predict(lm.fit)
test_pred = predict(lm.fit, newdata = test[selected_columns])
train_error = (train$y - train_pred)^2
test_error = (test$y - test_pred)^2
errors_df[col_name] = data.frame(run_1=c(train_error, test_error))
RSS_df[col_name] = regfit.fwd.summary$rss
RSq_df[col_name] = regfit.fwd.summary$adjr2
Cp_df[col_name] = regfit.fwd.summary$cp
BIC_df[col_name] = regfit.fwd.summary$bic
}
# Erros DataFrame
errors_df$error_type = c(rep('train', nrow(train)), rep('test', nrow(test)))
gather_errors_df = gather(errors_df, key = "key", value = "value", setdiff(names(errors_df), 'error_type'))
ggplot(data = gather_errors_df, aes(x = key, y = value, color=error_type)) +
geom_boxplot()
train[selected_columns])
train[selected_columns]
n = 20 # 20x cross valiation: train/test = 70/30
#-------first run-------
index = sample(1:nrow(my_data), size = round(0.6*nrow(my_data)))
train = my_data[index, ]
test = my_data[-index, ]
regfit.fwd = regsubsets(y~., data = train, nvmax = 1000, method = "forward")
regfit.fwd.summary = summary(regfit.fwd)
best_num_of_variables = head(which(regfit.fwd.summary$adjr2 > 0.995), 1)
best_variables = paste0(names(coef(regfit.fwd, best_num_of_variables))[-1], collapse=',')
best_models = data.frame(best_num_of_variables, best_variables, stringsAsFactors = FALSE)
selected_columns = c(names(coef(regfit.fwd, best_num_of_variables)[-1]), 'y')
lm.fit = lm(y~., data = train[selected_columns])
train_pred = predict(lm.fit, newdata = train[selected_columns])
test_pred = predict(lm.fit, newdata = test[selected_columns])
train_error = (train$y - train_pred)^2
test_error = (test$y - test_pred)^2
errors_df = data.frame(run_01=c(train_error, test_error))
RSS_df = data.frame(run_01 = regfit.fwd.summary$rss)
RSq_df = data.frame(run_01 = regfit.fwd.summary$adjr2)
Cp_df = data.frame(run_01 = regfit.fwd.summary$cp)
BIC_df = data.frame(run_01 = regfit.fwd.summary$bic)
#-------second to n runs------
for (i in 2:n) {
index = sample(1:nrow(my_data), size = round(0.7*nrow(my_data)))
train = my_data[index, ]
test = my_data[-index, ]
regfit.fwd = regsubsets(y~., data = train, nvmax = 1000, method = "forward")
regfit.fwd.summary = summary(regfit.fwd)
if (i < 10) {
col_name = paste0('run_0', i)
} else {
col_name = paste0('run_', i)
}
best_num_of_variables = head(which(regfit.fwd.summary$adjr2 > 0.995), 1)
best_variables = paste0(names(coef(regfit.fwd, best_num_of_variables))[-1], collapse=',')
best_models[i, ] = c(best_num_of_variables, best_variables)
selected_columns = c(names(coef(regfit.fwd, best_num_of_variables)[-1]), 'y')
lm.fit = lm(y~., data = train[selected_columns])
train_pred = predict(lm.fit, newdata = train[selected_columns])
test_pred = predict(lm.fit, newdata = test[selected_columns])
train_error = (train$y - train_pred)^2
test_error = (test$y - test_pred)^2
errors_df[col_name] = data.frame(run_1=c(train_error, test_error))
RSS_df[col_name] = regfit.fwd.summary$rss
RSq_df[col_name] = regfit.fwd.summary$adjr2
Cp_df[col_name] = regfit.fwd.summary$cp
BIC_df[col_name] = regfit.fwd.summary$bic
}
#-------second to n runs------
for (i in 2:n) {
index = sample(1:nrow(my_data), size = round(0.7*nrow(my_data)))
train = my_data[index, ]
test = my_data[-index, ]
regfit.fwd = regsubsets(y~., data = train, nvmax = 1000, method = "forward")
regfit.fwd.summary = summary(regfit.fwd)
if (i < 10) {
col_name = paste0('run_0', i)
} else {
col_name = paste0('run_', i)
}
best_num_of_variables = head(which(regfit.fwd.summary$adjr2 > 0.995), 1)
best_variables = paste0(names(coef(regfit.fwd, best_num_of_variables))[-1], collapse=',')
best_models[i, ] = c(best_num_of_variables, best_variables)
selected_columns = c(names(coef(regfit.fwd, best_num_of_variables)[-1]), 'y')
lm.fit = lm(y~., data = train[selected_columns])
train_pred = predict(lm.fit, newdata = train[selected_columns])
test_pred = predict(lm.fit, newdata = test[selected_columns])
train_error = (train$y - train_pred)^2
test_error = (test$y - test_pred)^2
errors_df[col_name] = data.frame(run_1=c(train_error, test_error))
RSS_df[col_name] = regfit.fwd.summary$rss
RSq_df[col_name] = regfit.fwd.summary$adjr2
Cp_df[col_name] = regfit.fwd.summary$cp
BIC_df[col_name] = regfit.fwd.summary$bic
}
# Erros DataFrame
errors_df$error_type = c(rep('train', nrow(train)), rep('test', nrow(test)))
# Erros DataFrame
errors_df$error_type = c(rep('train', nrow(train)), rep('test', nrow(test)))
gather_errors_df = gather(errors_df, key = "key", value = "value", setdiff(names(errors_df), 'error_type'))
ggplot(data = gather_errors_df, aes(x = key, y = value, color=error_type)) +
geom_boxplot()
n = 20 # 20x cross valiation: train/test = 70/30
#-------first run-------
index = sample(1:nrow(my_data), size = round(0.7*nrow(my_data)))
train = my_data[index, ]
test = my_data[-index, ]
regfit.fwd = regsubsets(y~., data = train, nvmax = 1000, method = "forward")
regfit.fwd.summary = summary(regfit.fwd)
best_num_of_variables = head(which(regfit.fwd.summary$adjr2 > 0.995), 1)
best_variables = paste0(names(coef(regfit.fwd, best_num_of_variables))[-1], collapse=',')
best_models = data.frame(best_num_of_variables, best_variables, stringsAsFactors = FALSE)
selected_columns = c(names(coef(regfit.fwd, best_num_of_variables)[-1]), 'y')
lm.fit = lm(y~., data = train[selected_columns])
train_pred = predict(lm.fit, newdata = train[selected_columns])
test_pred = predict(lm.fit, newdata = test[selected_columns])
train_error = (train$y - train_pred)^2
test_error = (test$y - test_pred)^2
errors_df = data.frame(run_01=c(train_error, test_error))
RSS_df = data.frame(run_01 = regfit.fwd.summary$rss)
RSq_df = data.frame(run_01 = regfit.fwd.summary$adjr2)
Cp_df = data.frame(run_01 = regfit.fwd.summary$cp)
BIC_df = data.frame(run_01 = regfit.fwd.summary$bic)
#-------second to n runs------
for (i in 2:n) {
index = sample(1:nrow(my_data), size = round(0.7*nrow(my_data)))
train = my_data[index, ]
test = my_data[-index, ]
regfit.fwd = regsubsets(y~., data = train, nvmax = 1000, method = "forward")
regfit.fwd.summary = summary(regfit.fwd)
if (i < 10) {
col_name = paste0('run_0', i)
} else {
col_name = paste0('run_', i)
}
best_num_of_variables = head(which(regfit.fwd.summary$adjr2 > 0.995), 1)
best_variables = paste0(names(coef(regfit.fwd, best_num_of_variables))[-1], collapse=',')
best_models[i, ] = c(best_num_of_variables, best_variables)
selected_columns = c(names(coef(regfit.fwd, best_num_of_variables)[-1]), 'y')
lm.fit = lm(y~., data = train[selected_columns])
train_pred = predict(lm.fit, newdata = train[selected_columns])
test_pred = predict(lm.fit, newdata = test[selected_columns])
train_error = (train$y - train_pred)^2
test_error = (test$y - test_pred)^2
errors_df[col_name] = data.frame(run_1=c(train_error, test_error))
RSS_df[col_name] = regfit.fwd.summary$rss
RSq_df[col_name] = regfit.fwd.summary$adjr2
Cp_df[col_name] = regfit.fwd.summary$cp
BIC_df[col_name] = regfit.fwd.summary$bic
}
# Erros DataFrame
errors_df$error_type = c(rep('train', nrow(train)), rep('test', nrow(test)))
gather_errors_df = gather(errors_df, key = "key", value = "value", setdiff(names(errors_df), 'error_type'))
ggplot(data = gather_errors_df, aes(x = key, y = value, color=error_type)) +
geom_boxplot() +
xlab(paste0(n, ' runs')) +
ylab('MSE') +
# frequency of best number of variables
table(best_models$best_num_of_variables)
ggplot(data = gather_errors_df, aes(x = key, y = value, color=error_type)) +
geom_boxplot() +
xlab(paste0(n, ' runs')) +
ylab('MSE')
ggplot(data = gather_errors_df, aes(x = key, y = value, color=error_type)) +
geom_boxplot() +
xlab(paste0(n, ' runs')) +
ylab('MSE') +
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(data = gather_errors_df, aes(x = key, y = value, color=error_type)) +
geom_boxplot() +
xlab(paste0(n, ' runs')) +
ylab('MSE') +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(data = gather_errors_df, aes(x = key, y = value, color=error_type)) +
geom_boxplot() +
xlab(paste0(n, ' runs')) +
ylab('MSE') +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(), legend.title = "Error Type")
element_text('aa')
ggplot(data = gather_errors_df, aes(x = key, y = value, color=error_type)) +
geom_boxplot() +
xlab(paste0(n, ' runs')) +
ylab('MSE') +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank(), legend.title = element_text("Error Type"))
ggplot(data = gather_errors_df, aes(x = key, y = value, color=error_type)) +
geom_boxplot() +
xlab(paste0(n, ' runs')) +
ylab('MSE') +
scale_fill_discrete(name = "Error Type") +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank())
ggplot(data = gather_errors_df, aes(x = key, y = value, color=error_type)) +
geom_boxplot() +
xlab(paste0(n, ' runs')) +
ylab('MSE') +
scale_color_discrete(name = "Error Type") +
theme(axis.text.x=element_blank(),
axis.ticks.x=element_blank())
barplot(table(best_models$best_num_of_variables))
